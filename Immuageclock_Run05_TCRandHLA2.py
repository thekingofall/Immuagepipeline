from optparse import OptionParser
import time,datetime

from optparse import OptionParser
import os
import re
import sys
import glob
import pandas as pd
#import matplotlib.pyplot as plt
#import seaborn as sns

import argparse
parser = argparse.ArgumentParser(description=' HLA and TCR ', prog='Immuageclock_Run05_TCRandHLA.py')
parser.add_argument('--input','-i',
                nargs='+',
                required=False,
                metavar='FQ',
                help=(".fastq file(s) (fished or raw) or .bam files stored for re-use, generated by "))

parser.add_argument('--outsave','-o',
                required=False,
                help="Specifies the out directory to which all files should be written."
                )
parser.add_argument('--enumerate','-e',
                type=int,
                default=1,
                metavar='N',
                help=("Number of enumerations. OptiType will output the optimal solution and "
                        "the top N-1 suboptimal solutions in the results CSV. Default: 1"))
parser.add_argument('--ways','-w',
                type=str,
                default="HLA",
                metavar='W',
                help=("HLA OR TCR OR BOTH. Default: HLA"))


# parser = OptionParser(usage="usage: %prog -f readFolde [-p <int>] [-e <int>] ", version="%prog 1")
# parser.add_option("-i","--input",
#         action="store", 
#         dest="readFolder",
#         help="Folder with RNA-seq data (gzipped fastq files)")


# parser.add_option("-o", "--outsave",
#                 action="store",        
#                 help="saveIdirectory to save the result")

# parser.add_option("-e", "--enumerate",
#                 action="store",
#                 dest="threads",
#                 default="1",
#                 help="Parafly used. Default : 8")

# parser.add_option("-w","--ways",
#                 action="store",
#                 default="HLA",
#                 help="HLA OR TCR OR BOTH. Default:HLA'")

def MergeHLA(indirname):
        print(indirname)
        dfs = []
        for i in os.listdir(indirname):
                tmename=i.split("_")[0]
                # tem=i.split("_")[0]+"_HLAtype_result.tsv"
                tem=i.split("_HLA")[0]+"_HLAtype_result.tsv"
                print(i)
                print(tem)
                roudncsv=os.path.join(indirname,i, tem)
                print(i)
                print(roudncsv)
                if os.path.exists(roudncsv):
                        print(roudncsv)
                        df=pd.read_csv(roudncsv,sep="\t",header=0)
                        df.rename(columns={'Unnamed: 0':'name'},inplace = True)
                        df["name"]=tmename      
                        dfs.append(df)

        result=pd.concat(dfs)
        
        resultsave=indirname
        result.to_csv(os.path.join(resultsave,"A08_All_HLAtype_result.tsv"),sep="\t",index=False)
                
        


def HLAtype(readFolder,outdirname,enumeratetime="1"):
        HLArun=open(os.path.join("HLArun.txt"),"w")
        print("------------------HLAtype------------------")
        for file in glob.glob(readFolder+"/*_1.f*"):
                if re.search("val",file):
                        samplename=file.split("/")[-1].split("_R1_val_1.fq.gz")[0]
                        #print(samplename)
                        

                        read1=file.split("/")[-1]
                        
                        print(read1)
                        # print(samplename)
                        #print(file.split("/")[-1].split("_")[0])
                        read2=samplename+"_R2_val_2.fq.gz"
                        print(read2)
                        if os.path.exists(readFolder+"/"+samplename+"_R2_val_2.fq.gz") and read2.endswith(".gz") and read1.endswith(".gz"):
                                read2=read2
                                read1=read1
                                print(read2)
                                outdir=os.path.join(outdirname,samplename+"_HLA")
                
                                outpre=samplename+"_HLAtype"
                                
                                # os.system("OptiTypePipeline.py -i "+readFolder+"/"+read1+"  "+readFolder+"/"+read2+"  --rna  -o "+outdir+" -p "+outpre+" -e 1")
                                run1="OptiTypePipeline.py -i "+readFolder+"/"+read1+"  "+readFolder+"/"+read2+"  --rna  -o "+outdir+" -p "+outpre+" -e 1"
                                print(run1)
                                HLArun.write(run1+"\n")
                else:
                        samplename=file.split("/")[-1].split("_1.f")[0]
                        #print(samplename)
                        

                        read1=file.split("/")[-1]
                        
                        print(read1)
                        # print(samplename)
                        #print(file.split("/")[-1].split("_")[0])
                        read2=file.split("/")[-1].split("_1.f")[0]+"_2.f"+file.split("/")[-1].split("_1.f")[1]
                        print(read2)
                        if os.path.exists(readFolder+"/"+read2) and read2.endswith(".gz") and read1.endswith(".gz"):
                                read2=read2
                                read1=read1
                                print(read2)
                                outdir=os.path.join(outdirname,samplename+"_HLA")
                
                                outpre=samplename+"_HLAtype"
                                run1="OptiTypePipeline.py -i "+readFolder+"/"+read1+"  "+readFolder+"/"+read2+"  --rna  -o "+outdir+" -p "+outpre+" -e 1"
                                print(run1)
                                # os.system()



def TCR_get(readFolder,outdirname):
        # TCRdir=os.path.join(outdirname,"TCR")
        TCRruntxt=os.path.join(outdirname,"TCRrun.txt")
        TCRrunt=open(TCRruntxt,"w")
        for file in glob.glob(readFolder+"/*_1.f*"):
                samplename=file.split("/")[-1].split("_1.f")[0]
                print(samplename)

                read1=file.split("/")[-1]
                # print(samplename)
                print(file.split("/")[-1].split("_")[0])
                read2=file.split("/")[-1].split("_1.f")[0]+"_2.f"+file.split("/")[-1].split("_1.f")[1]
                read2=read2.replace("_1_","_2_")
                # print(read2.replace("_1_","_2_"))
                print(read2)
                if os.path.exists(readFolder+"/"+read2) and read2.endswith(".gz") and read1.endswith(".gz"):
                        read2=read2
                        read1=read1
                        outdir=os.path.join(outdirname,samplename+"_TCR")
                        outpre=samplename+"_TCRtype"
                        
                        os.system("mkdir -p "+outdir)
                        TCRruncommnd="java -jar /home/maolp/mao/Project/20211110_xcc_TCR/2.cleandata/mixcr-3.0.13/mixcr.jar  analyze shotgun -s hsa --starting-material RNA  -t 20  "+readFolder+"/"+read1+" "+readFolder+"/"+read2 +" "+outdir+"/"+outpre
                        # os.system()
                        print(TCRruncommnd)
                        TCRrunt.write(TCRruncommnd+"\n")
                        # os.system("OptiTypePipeline.py -i "+readFolder+"/"+read1+"  "+readFolder+"/"+read2+"  --rna  -o "+outdir+" -p "+outpre+" -e "+str(args.enumerate))
# shotgun -s hsa --starting-material rna --only-productive --impute-germline-on-export --report 



if __name__ == '__main__':
        args = parser.parse_args()
        outsave=args.outsave
        os.system("mkdir -p "+outsave)
        # HLAtype(readFolder=args.input[0])
        # TCR_get(readFolder=args.input[0])
        if args.ways=="HLA":
                HLAtype(readFolder=args.input[0],outdirname=outsave,enumeratetime=args.enumerate)
                os.system("ParaFly -c "+"HLArun.txt"+" -CPU 4")
                # MergeHLA(indirname=outsave)
        elif args.ways=="TCR":
                TCR_get(readFolder=args.input[0],outdirname=outsave)
        elif args.ways=="BOTH":
                HLAtype(readFolder=args.input[0],outdirname=outsave,enumeratetime=args.enumerate)
                TCR_get(readFolder=args.input[0],outdirname=outsave)
                MergeHLA(indirname=outsave)
        elif args.ways=="Merge":
                #print(outsave)
                MergeHLA(indirname=outsave)






